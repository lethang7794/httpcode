name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.0

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  tag-and-release:
    name: Tag and Release
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.0

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get latest tag
      id: get_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Get commits since last tag
      id: get_commits
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          COMMITS=$(git log --pretty=format:"%s" HEAD)
          COMMIT_COUNT=$(git rev-list --count HEAD)
        else
          COMMITS=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)
          COMMIT_COUNT=$(git rev-list --count ${LATEST_TAG}..HEAD)
        fi
        
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
        echo "Found $COMMIT_COUNT commits since $LATEST_TAG"

    - name: Determine version bump
      id: version_bump
      run: |
        COMMITS="${{ steps.get_commits.outputs.commits }}"
        
        # Determine bump type based on conventional commits
        BUMP_TYPE="patch"
        
        # Check for breaking changes (major version bump)
        if echo "$COMMITS" | grep -qiE "(breaking change|breaking:|!:|major:)"; then
          BUMP_TYPE="major"
        # Check for new features (minor version bump)
        elif echo "$COMMITS" | grep -qiE "(feat:|feature:|add:|new:|minor:)"; then
          BUMP_TYPE="minor"
        # Default to patch for fixes, improvements, etc.
        elif echo "$COMMITS" | grep -qiE "(fix:|bug:|patch:|update:|improve:|refactor:|perf:|docs:|style:|test:|chore:)"; then
          BUMP_TYPE="patch"
        fi
        
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "Determined bump type: $BUMP_TYPE"

    - name: Calculate new version
      id: new_version
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
        
        # Remove 'v' prefix for calculation
        VERSION=${LATEST_TAG#v}
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Bump version based on type
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Check if should create release
      id: should_release
      run: |
        COMMIT_COUNT="${{ steps.get_commits.outputs.commit_count }}"
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        
        if [ "$COMMIT_COUNT" -gt 0 ] && [ "$NEW_VERSION" != "$LATEST_TAG" ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "Will create release: $NEW_VERSION"
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
          echo "No release needed"
        fi

    - name: Create and push tag
      id: create_tag
      if: steps.should_release.outputs.should_release == 'true'
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        
        # Create annotated tag
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION

        Bump type: ${{ steps.version_bump.outputs.bump_type }}
        
        Changes:
        ${{ steps.get_commits.outputs.commits }}"
        
        git push origin "$NEW_VERSION"
        echo "tag_created=true" >> $GITHUB_OUTPUT
        echo "‚úÖ Created and pushed tag: $NEW_VERSION"

    - name: Run GoReleaser
      if: steps.should_release.outputs.should_release == 'true' && steps.create_tag.outputs.tag_created == 'true'
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Release Summary
      if: steps.should_release.outputs.should_release == 'true'
      run: |
        echo "üöÄ Release completed successfully!"
        echo "üì¶ Version: ${{ steps.new_version.outputs.new_version }}"
        echo "üè∑Ô∏è Tag: Created and pushed"
        echo "üìã GoReleaser: Executed"
        echo "üîó Check the release at: https://github.com/lethang7794/httpcode/releases/tag/${{ steps.new_version.outputs.new_version }}"
